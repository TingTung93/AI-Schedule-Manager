{
	"info": {
		"_postman_id": "ai-schedule-manager-collection",
		"name": "AI Schedule Manager API",
		"description": "Complete API collection for the AI Schedule Manager with authentication, CRUD operations, and AI-powered scheduling features.\n\n## Getting Started\n\n1. Set up your environment variables in the collection\n2. Run the \"Login\" request to get an access token\n3. The token will be automatically stored and used for subsequent requests\n4. Explore the API endpoints and test the features\n\n## Features\n\n- 🔐 JWT Authentication\n- 👥 Employee Management\n- 📋 Schedule Rules (with NLP parsing)\n- 📅 Schedule Management\n- 🔔 Notifications\n- 🤖 AI Schedule Generation\n- 📊 Analytics\n\n## Environment Variables\n\n- `base_url`: API base URL (default: http://localhost:8000)\n- `access_token`: JWT access token (auto-populated)\n- `manager_email`: Manager email for login\n- `manager_password`: Manager password\n- `employee_email`: Employee email for testing\n- `employee_password`: Employee password",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "ai-schedule-manager"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login (Manager)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.expect(jsonData).to.have.property('token_type');",
									"    pm.expect(jsonData).to.have.property('user');",
									"});",
									"",
									"// Store access token",
									"pm.test(\"Store access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('access_token', jsonData.access_token);",
									"    console.log('Access token stored:', jsonData.access_token.substring(0, 20) + '...');",
									"});",
									"",
									"// Test user role",
									"pm.test(\"User has manager role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.role).to.eql('manager');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{manager_email}}\",\n    \"password\": \"{{manager_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('role');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/me",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "me"]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has new access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.collectionVariables.set('access_token', jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "refresh"]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms logout\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Logout successful');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "logout"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Employees",
			"item": [
				{
					"name": "List Employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData).to.have.property('page');",
									"    pm.expect(jsonData).to.have.property('size');",
									"    pm.expect(jsonData).to.have.property('pages');",
									"});",
									"",
									"pm.test(\"Items is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.be.an('array');",
									"});",
									"",
									"// Store first employee ID for later use",
									"if (pm.response.json().items.length > 0) {",
									"    pm.collectionVariables.set('employee_id', pm.response.json().items[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/employees?page=1&size=10&sort_by=name&sort_order=asc",
							"host": ["{{base_url}}"],
							"path": ["api", "employees"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sort_by",
									"value": "name"
								},
								{
									"key": "sort_order",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has employee data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('role');",
									"});",
									"",
									"// Store created employee ID",
									"pm.test(\"Store created employee ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('created_employee_id', jsonData.id);",
									"    console.log('Created employee ID:', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"role\": \"server\",\n    \"phone\": \"+1-555-123-4567\",\n    \"hourly_rate\": 15.50,\n    \"max_hours_per_week\": 40,\n    \"qualifications\": [\"food_safety\", \"cash_handling\"],\n    \"availability_pattern\": {\n        \"monday\": [\"09:00-17:00\"],\n        \"tuesday\": [\"09:00-17:00\"],\n        \"wednesday\": [\"09:00-17:00\"],\n        \"thursday\": [\"09:00-17:00\"],\n        \"friday\": [\"09:00-17:00\"]\n    },\n    \"active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/employees",
							"host": ["{{base_url}}"],
							"path": ["api", "employees"]
						}
					},
					"response": []
				},
				{
					"name": "Get Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has employee data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/employees/{{employee_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "employees", "{{employee_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "Update Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Employee data updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.phone).to.eql(\"+1-555-999-8888\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone\": \"+1-555-999-8888\",\n    \"hourly_rate\": 16.00\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/employees/{{created_employee_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "employees", "{{created_employee_id}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rules",
			"item": [
				{
					"name": "Parse Natural Language Rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Rule parsed successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('rule_type');",
									"    pm.expect(jsonData).to.have.property('constraints');",
									"    pm.expect(jsonData).to.have.property('original_text');",
									"});",
									"",
									"// Store created rule ID",
									"pm.test(\"Store rule ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('rule_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rule_text\": \"John cannot work on Sundays and prefers morning shifts from 9 AM to 2 PM\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/rules/parse",
							"host": ["{{base_url}}"],
							"path": ["api", "rules", "parse"]
						}
					},
					"response": []
				},
				{
					"name": "List Rules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData).to.have.property('total');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/rules?page=1&size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "rules"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Rule data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('original_text');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/rules/{{rule_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "rules", "{{rule_id}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Schedules",
			"item": [
				{
					"name": "List Schedules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData).to.have.property('total');",
									"});",
									"",
									"// Store first schedule ID",
									"if (pm.response.json().items.length > 0) {",
									"    pm.collectionVariables.set('schedule_id', pm.response.json().items[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/schedules?page=1&size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "schedules"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate AI Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Schedule generation response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"// Store generated schedule ID",
									"pm.test(\"Store generated schedule ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('generated_schedule_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"start_date\": \"2024-01-15\",\n    \"end_date\": \"2024-01-21\",\n    \"constraints\": {\n        \"max_hours_per_employee\": 40,\n        \"min_coverage_ratio\": 1.2,\n        \"priority_shifts\": [\"morning\", \"evening\"]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/schedule/generate",
							"host": ["{{base_url}}"],
							"path": ["api", "schedule", "generate"]
						}
					},
					"response": []
				},
				{
					"name": "Optimize Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Optimization results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('improvements');",
									"    pm.expect(jsonData.improvements).to.have.property('cost_savings');",
									"    pm.expect(jsonData.improvements).to.have.property('coverage');",
									"    pm.expect(jsonData.improvements).to.have.property('satisfaction');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/schedule/optimize?schedule_id={{generated_schedule_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "schedule", "optimize"],
							"query": [
								{
									"key": "schedule_id",
									"value": "{{generated_schedule_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "List Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('items');",
									"    pm.expect(jsonData).to.have.property('total');",
									"});",
									"",
									"// Store first notification ID",
									"if (pm.response.json().items.length > 0) {",
									"    pm.collectionVariables.set('notification_id', pm.response.json().items[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/notifications?page=1&size=10",
							"host": ["{{base_url}}"],
							"path": ["api", "notifications"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Notification created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.collectionVariables.set('created_notification_id', pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"notification_type\": \"schedule\",\n    \"title\": \"Schedule Updated\",\n    \"message\": \"Your schedule for next week has been updated. Please review the changes.\",\n    \"priority\": \"normal\",\n    \"employee_id\": {{employee_id}},\n    \"metadata\": {\n        \"schedule_week\": \"2024-01-15\",\n        \"changes\": [\"shift_time\", \"location\"]\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notifications",
							"host": ["{{base_url}}"],
							"path": ["api", "notifications"]
						}
					},
					"response": []
				},
				{
					"name": "Mark Notification as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Notification marked as read\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.read).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/notifications/{{created_notification_id}}/read",
							"host": ["{{base_url}}"],
							"path": ["api", "notifications", "{{created_notification_id}}", "read"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Analytics",
			"item": [
				{
					"name": "Get Analytics Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Analytics data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total_employees');",
									"    pm.expect(jsonData).to.have.property('total_rules');",
									"    pm.expect(jsonData).to.have.property('total_schedules');",
									"    pm.expect(jsonData).to.have.property('avg_hours_per_week');",
									"    pm.expect(jsonData).to.have.property('optimization_score');",
									"});",
									"",
									"pm.test(\"Analytics values are numbers\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.total_employees).to.be.a('number');",
									"    pm.expect(jsonData.optimization_score).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/analytics/overview",
							"host": ["{{base_url}}"],
							"path": ["api", "analytics", "overview"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health & Info",
			"item": [
				{
					"name": "API Root",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API info returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": ["{{base_url}}"],
							"path": [""]
						}
					},
					"response": []
				},
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Health status is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-refresh token if needed",
					"const token = pm.collectionVariables.get('access_token');",
					"if (!token && pm.request.url.path.indexOf('login') === -1) {",
					"    console.log('No access token found. Please login first.');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global error handling",
					"if (pm.response.status === 401) {",
					"    console.log('Authentication failed. Token may be expired.');",
					"}",
					"",
					"// Response time check",
					"pm.test(\"Response time is reasonable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Content-Type check for JSON responses",
					"if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
					"    pm.test(\"Response is JSON\", function () {",
					"        pm.response.to.be.json;",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "manager_email",
			"value": "admin@example.com",
			"type": "string"
		},
		{
			"key": "manager_password",
			"value": "admin123",
			"type": "string"
		},
		{
			"key": "employee_email",
			"value": "employee@example.com",
			"type": "string"
		},
		{
			"key": "employee_password",
			"value": "employee123",
			"type": "string"
		},
		{
			"key": "employee_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "rule_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "schedule_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "notification_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_employee_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "created_notification_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "generated_schedule_id",
			"value": "",
			"type": "string"
		}
	]
}