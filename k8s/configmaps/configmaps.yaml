apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: ai-schedule-manager
  labels:
    app: ai-schedule-manager
data:
  # Application settings
  log-level: "INFO"
  allowed-hosts: "yourdomain.com,www.yourdomain.com,api.yourdomain.com"
  cors-origins: "https://yourdomain.com,https://www.yourdomain.com"
  api-url: "https://api.yourdomain.com"

  # Feature flags
  enable-analytics: "true"
  enable-email-notifications: "true"
  enable-slack-integration: "false"
  enable-calendar-sync: "true"

  # Performance settings
  max-connections: "100"
  connection-timeout: "30"
  request-timeout: "60"

  # Cache settings
  cache-ttl: "3600"
  session-timeout: "86400"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: ai-schedule-manager
  labels:
    app: postgres
data:
  postgres-db: "ai_schedule_manager"
  postgres-port: "5432"
  # PostgreSQL configuration
  postgresql.conf: |
    # Connection settings
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB

    # Logging settings
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_duration = on
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

    # Security settings
    ssl = on
    ssl_cert_file = 'server.crt'
    ssl_key_file = 'server.key'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-config
  namespace: ai-schedule-manager
  labels:
    app: postgres
data:
  init-db.sql: |
    -- Create database if not exists
    SELECT 'CREATE DATABASE ai_schedule_manager'
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ai_schedule_manager')\gexec

    -- Create extensions
    \c ai_schedule_manager;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";

    -- Create read-only user for monitoring
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'monitoring_user') THEN
            CREATE ROLE monitoring_user WITH LOGIN PASSWORD 'monitoring_pass';
            GRANT CONNECT ON DATABASE ai_schedule_manager TO monitoring_user;
            GRANT USAGE ON SCHEMA public TO monitoring_user;
            GRANT SELECT ON ALL TABLES IN SCHEMA public TO monitoring_user;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO monitoring_user;
        END IF;
    END
    $$;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: ai-schedule-manager
  labels:
    app: ai-schedule-manager
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;

        # Performance settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 32M;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

        # Upstream servers
        upstream backend {
            least_conn;
            server ai-schedule-backend-service:8000 max_fails=3 fail_timeout=30s;
        }

        # Default server
        server {
            listen 80 default_server;
            server_name _;
            return 444;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: ai-schedule-manager
  labels:
    app: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "alert_rules.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'ai-schedule-backend'
        static_configs:
          - targets: ['ai-schedule-backend-service:8000']
        metrics_path: '/metrics'
        scrape_interval: 30s

      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres-service:5432']
        metrics_path: '/metrics'

      - job_name: 'redis'
        static_configs:
          - targets: ['redis-service:6379']

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__

  alert_rules.yml: |
    groups:
    - name: ai-schedule-manager
      rules:
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High error rate detected
          description: "Error rate is {{ $value }} errors per second"

      - alert: HighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 0.5
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: High latency detected
          description: "95th percentile latency is {{ $value }} seconds"

      - alert: DatabaseDown
        expr: up{job="postgres"} == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: Database is down
          description: "PostgreSQL database has been down for more than 5 minutes"

      - alert: RedisDown
        expr: up{job="redis"} == 0
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: Redis is down
          description: "Redis cache has been down for more than 5 minutes"