# Optimized Backend Dockerfile with multi-stage build
FROM python:3.9-slim AS python-base

# Python environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# ---- Dependencies Stage ----
FROM python-base AS dependencies

WORKDIR /tmp

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy only requirements first for better caching
COPY backend/requirements.txt ./
RUN pip install --user --no-warn-script-location -r requirements.txt

# Download spaCy model
RUN python -m spacy download en_core_web_sm

# ---- Build Stage ----
FROM python-base AS build

# Copy dependencies from previous stage
COPY --from=dependencies /root/.local /root/.local
COPY --from=dependencies /root/.cache /root/.cache

# Make scripts available
ENV PATH=/root/.local/bin:$PATH

WORKDIR /app

# Copy application code
COPY backend/ ./backend/

# ---- Runtime Stage ----
FROM python:3.9-slim AS runtime

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Python packages from build stage
COPY --from=build /root/.local /root/.local
COPY --from=build /root/.cache /root/.cache

# Make scripts available
ENV PATH=/root/.local/bin:$PATH

WORKDIR /app

# Copy application code
COPY --from=build /app/backend ./backend

# Create non-root user
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000

CMD ["uvicorn", "backend.src.main:app", "--host", "0.0.0.0", "--port", "8000"]

---

# Optimized Frontend Dockerfile with multi-stage build
FROM node:18-alpine AS deps

WORKDIR /app

# Copy package files
COPY frontend/package*.json ./

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production

# ---- Build Stage ----
FROM node:18-alpine AS builder

WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY frontend/ ./

# Build application
RUN npm run build

# ---- Runtime Stage ----
FROM nginx:alpine AS runtime

# Install curl for healthcheck
RUN apk add --no-cache curl

# Copy custom nginx config
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Copy built application
COPY --from=builder /app/build /usr/share/nginx/html

# Add non-root user
RUN adduser -D -H -u 1000 -s /bin/sh www-data

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]