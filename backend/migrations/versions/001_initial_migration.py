"""Initial migration: create all tables

Revision ID: 001
Revises:
Create Date: 2025-09-15 19:30:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create employees table
    op.create_table('employees',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('role', sa.String(length=100), nullable=False),
        sa.Column('qualifications', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('availability', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('is_admin', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint("role IN ('admin', 'manager', 'supervisor', 'employee')", name=op.f('ck_employees_valid_role')),
        sa.CheckConstraint("email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'", name=op.f('ck_employees_valid_email_format')),
        sa.CheckConstraint('char_length(name) >= 2', name=op.f('ck_employees_name_min_length')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_employees')),
        sa.UniqueConstraint('email', name=op.f('uq_employees_email'))
    )
    op.create_index('ix_employees_availability', 'employees', ['availability'], unique=False, postgresql_using='gin')
    op.create_index('ix_employees_email', 'employees', ['email'], unique=False)
    op.create_index('ix_employees_id', 'employees', ['id'], unique=False)
    op.create_index('ix_employees_name', 'employees', ['name'], unique=False)
    op.create_index('ix_employees_qualifications', 'employees', ['qualifications'], unique=False, postgresql_using='gin')
    op.create_index('ix_employees_role_active', 'employees', ['role', 'is_active'], unique=False)

    # Create schedules table
    op.create_table('schedules',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('week_start', sa.Date(), nullable=False),
        sa.Column('week_end', sa.Date(), nullable=False),
        sa.Column('status', sa.String(length=50), nullable=False),
        sa.Column('version', sa.Integer(), nullable=False),
        sa.Column('parent_schedule_id', sa.Integer(), nullable=True),
        sa.Column('title', sa.String(length=255), nullable=True),
        sa.Column('description', sa.String(length=1000), nullable=True),
        sa.Column('notes', sa.String(length=2000), nullable=True),
        sa.Column('created_by', sa.Integer(), nullable=False),
        sa.Column('approved_by', sa.Integer(), nullable=True),
        sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('published_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint('week_start <= week_end', name=op.f('ck_schedules_valid_week_period')),
        sa.CheckConstraint("week_end - week_start <= INTERVAL '7 days'", name=op.f('ck_schedules_max_week_duration')),
        sa.CheckConstraint("status IN ('draft', 'pending_approval', 'approved', 'published', 'archived', 'rejected')", name=op.f('ck_schedules_valid_status')),
        sa.CheckConstraint('version > 0', name=op.f('ck_schedules_positive_version')),
        sa.CheckConstraint("(status = 'approved' AND approved_by IS NOT NULL AND approved_at IS NOT NULL) OR status != 'approved'", name=op.f('ck_schedules_approval_required_when_approved')),
        sa.CheckConstraint("(status = 'published' AND published_at IS NOT NULL) OR status != 'published'", name=op.f('ck_schedules_published_date_required_when_published')),
        sa.ForeignKeyConstraint(['approved_by'], ['employees.id'], name=op.f('fk_schedules_approved_by_employees')),
        sa.ForeignKeyConstraint(['created_by'], ['employees.id'], name=op.f('fk_schedules_created_by_employees')),
        sa.ForeignKeyConstraint(['parent_schedule_id'], ['schedules.id'], name=op.f('fk_schedules_parent_schedule_id_schedules')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_schedules'))
    )
    op.create_index('ix_schedules_creator_status', 'schedules', ['created_by', 'status'], unique=False)
    op.create_index('ix_schedules_id', 'schedules', ['id'], unique=False)
    op.create_index('ix_schedules_parent_schedule_id', 'schedules', ['parent_schedule_id'], unique=False)
    op.create_index('ix_schedules_parent_version', 'schedules', ['parent_schedule_id', 'version'], unique=False)
    op.create_index('ix_schedules_status', 'schedules', ['status'], unique=False)
    op.create_index('ix_schedules_status_created', 'schedules', ['status', 'created_at'], unique=False)
    op.create_index('ix_schedules_week_end', 'schedules', ['week_end'], unique=False)
    op.create_index('ix_schedules_week_period', 'schedules', ['week_start', 'week_end'], unique=False)
    op.create_index('ix_schedules_week_start', 'schedules', ['week_start'], unique=False)

    # Create shifts table
    op.create_table('shifts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('date', sa.Date(), nullable=False),
        sa.Column('start_time', sa.Time(), nullable=False),
        sa.Column('end_time', sa.Time(), nullable=False),
        sa.Column('shift_type', sa.String(length=100), nullable=False),
        sa.Column('required_staff', sa.Integer(), nullable=False),
        sa.Column('requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('description', sa.String(length=500), nullable=True),
        sa.Column('priority', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint('start_time < end_time', name=op.f('ck_shifts_valid_shift_times')),
        sa.CheckConstraint('required_staff > 0', name=op.f('ck_shifts_positive_required_staff')),
        sa.CheckConstraint('priority BETWEEN 1 AND 10', name=op.f('ck_shifts_valid_priority_range')),
        sa.CheckConstraint("shift_type IN ('general', 'management', 'specialized', 'emergency', 'training')", name=op.f('ck_shifts_valid_shift_type')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_shifts'))
    )
    op.create_index('ix_shifts_date', 'shifts', ['date'], unique=False)
    op.create_index('ix_shifts_date_time', 'shifts', ['date', 'start_time', 'end_time'], unique=False)
    op.create_index('ix_shifts_date_type', 'shifts', ['date', 'shift_type'], unique=False)
    op.create_index('ix_shifts_id', 'shifts', ['id'], unique=False)
    op.create_index('ix_shifts_requirements', 'shifts', ['requirements'], unique=False, postgresql_using='gin')
    op.create_index('ix_shifts_shift_type', 'shifts', ['shift_type'], unique=False)
    op.create_index('ix_shifts_type_priority', 'shifts', ['shift_type', 'priority'], unique=False)

    # Create rules table
    op.create_table('rules',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('rule_text', sa.Text(), nullable=False),
        sa.Column('rule_type', sa.String(length=100), nullable=False),
        sa.Column('employee_id', sa.Integer(), nullable=True),
        sa.Column('constraints', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('priority', sa.Integer(), nullable=False),
        sa.Column('active', sa.Boolean(), nullable=False),
        sa.Column('strict', sa.Boolean(), nullable=False),
        sa.Column('violation_count', sa.Integer(), nullable=False),
        sa.Column('effective_from', sa.DateTime(timezone=True), nullable=True),
        sa.Column('effective_until', sa.DateTime(timezone=True), nullable=True),
        sa.Column('description', sa.String(length=1000), nullable=True),
        sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint("rule_type IN ('availability', 'workload', 'qualification', 'preference', 'restriction', 'overtime', 'consecutive_days', 'rest_period')", name=op.f('ck_rules_valid_rule_type')),
        sa.CheckConstraint('priority BETWEEN 1 AND 10', name=op.f('ck_rules_valid_priority_range')),
        sa.CheckConstraint('violation_count >= 0', name=op.f('ck_rules_non_negative_violations')),
        sa.CheckConstraint('(effective_from IS NULL) OR (effective_until IS NULL) OR (effective_from <= effective_until)', name=op.f('ck_rules_valid_effective_period')),
        sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE', name=op.f('fk_rules_employee_id_employees')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_rules'))
    )
    op.create_index('ix_rules_constraints', 'rules', ['constraints'], unique=False, postgresql_using='gin')
    op.create_index('ix_rules_effective_period', 'rules', ['effective_from', 'effective_until'], unique=False)
    op.create_index('ix_rules_employee_id', 'rules', ['employee_id'], unique=False)
    op.create_index('ix_rules_employee_type', 'rules', ['employee_id', 'rule_type'], unique=False)
    op.create_index('ix_rules_id', 'rules', ['id'], unique=False)
    op.create_index('ix_rules_priority_active', 'rules', ['priority', 'active'], unique=False)
    op.create_index('ix_rules_rule_type', 'rules', ['rule_type'], unique=False)
    op.create_index('ix_rules_tags', 'rules', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('ix_rules_type_active', 'rules', ['rule_type', 'active'], unique=False)

    # Create notifications table
    op.create_table('notifications',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('type', sa.String(length=100), nullable=False),
        sa.Column('title', sa.String(length=255), nullable=False),
        sa.Column('message', sa.Text(), nullable=False),
        sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('read', sa.Boolean(), nullable=False),
        sa.Column('read_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('priority', sa.String(length=20), nullable=False),
        sa.Column('category', sa.String(length=100), nullable=True),
        sa.Column('action_url', sa.String(length=500), nullable=True),
        sa.Column('action_text', sa.String(length=100), nullable=True),
        sa.Column('related_entity_type', sa.String(length=100), nullable=True),
        sa.Column('related_entity_id', sa.Integer(), nullable=True),
        sa.Column('delivery_method', sa.String(length=50), nullable=False),
        sa.Column('email_sent', sa.Boolean(), nullable=False),
        sa.Column('email_sent_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('push_sent', sa.Boolean(), nullable=False),
        sa.Column('push_sent_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint("type IN ('schedule_update', 'shift_assignment', 'shift_change', 'approval_required', 'approval_response', 'rule_violation', 'system_alert', 'reminder', 'announcement')", name=op.f('ck_notifications_valid_notification_type')),
        sa.CheckConstraint("priority IN ('low', 'normal', 'high', 'urgent')", name=op.f('ck_notifications_valid_priority')),
        sa.CheckConstraint("delivery_method IN ('in_app', 'email', 'push', 'sms', 'all')", name=op.f('ck_notifications_valid_delivery_method')),
        sa.CheckConstraint('(read = false) OR (read = true AND read_at IS NOT NULL)', name=op.f('ck_notifications_read_at_required_when_read')),
        sa.CheckConstraint('(expires_at IS NULL) OR (expires_at > created_at)', name=op.f('ck_notifications_valid_expiration')),
        sa.CheckConstraint('(email_sent = false) OR (email_sent = true AND email_sent_at IS NOT NULL)', name=op.f('ck_notifications_email_sent_at_required')),
        sa.CheckConstraint('(push_sent = false) OR (push_sent = true AND push_sent_at IS NOT NULL)', name=op.f('ck_notifications_push_sent_at_required')),
        sa.ForeignKeyConstraint(['user_id'], ['employees.id'], ondelete='CASCADE', name=op.f('fk_notifications_user_id_employees')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_notifications'))
    )
    op.create_index('ix_notifications_category', 'notifications', ['category'], unique=False)
    op.create_index('ix_notifications_category_created', 'notifications', ['category', 'created_at'], unique=False)
    op.create_index('ix_notifications_created_at', 'notifications', ['created_at'], unique=False)
    op.create_index('ix_notifications_data', 'notifications', ['data'], unique=False, postgresql_using='gin')
    op.create_index('ix_notifications_expires', 'notifications', ['expires_at'], unique=False)
    op.create_index('ix_notifications_id', 'notifications', ['id'], unique=False)
    op.create_index('ix_notifications_priority', 'notifications', ['priority'], unique=False)
    op.create_index('ix_notifications_priority_created', 'notifications', ['priority', 'created_at'], unique=False)
    op.create_index('ix_notifications_read', 'notifications', ['read'], unique=False)
    op.create_index('ix_notifications_related_entity', 'notifications', ['related_entity_type', 'related_entity_id'], unique=False)
    op.create_index('ix_notifications_type', 'notifications', ['type'], unique=False)
    op.create_index('ix_notifications_unread_urgent', 'notifications', ['read', 'priority', 'created_at'], unique=False)
    op.create_index('ix_notifications_user_id', 'notifications', ['user_id'], unique=False)
    op.create_index('ix_notifications_user_read', 'notifications', ['user_id', 'read'], unique=False)
    op.create_index('ix_notifications_user_type', 'notifications', ['user_id', 'type'], unique=False)

    # Create schedule_assignments table
    op.create_table('schedule_assignments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('schedule_id', sa.Integer(), nullable=False),
        sa.Column('employee_id', sa.Integer(), nullable=False),
        sa.Column('shift_id', sa.Integer(), nullable=False),
        sa.Column('status', sa.String(length=50), nullable=False),
        sa.Column('priority', sa.Integer(), nullable=False),
        sa.Column('notes', sa.String(length=1000), nullable=True),
        sa.Column('assigned_by', sa.Integer(), nullable=True),
        sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('conflicts_resolved', sa.Boolean(), nullable=False),
        sa.Column('auto_assigned', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint("status IN ('assigned', 'pending', 'confirmed', 'declined', 'cancelled', 'completed')", name=op.f('ck_schedule_assignments_valid_assignment_status')),
        sa.CheckConstraint('priority BETWEEN 1 AND 10', name=op.f('ck_schedule_assignments_valid_assignment_priority')),
        sa.ForeignKeyConstraint(['assigned_by'], ['employees.id'], name=op.f('fk_schedule_assignments_assigned_by_employees')),
        sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE', name=op.f('fk_schedule_assignments_employee_id_employees')),
        sa.ForeignKeyConstraint(['schedule_id'], ['schedules.id'], ondelete='CASCADE', name=op.f('fk_schedule_assignments_schedule_id_schedules')),
        sa.ForeignKeyConstraint(['shift_id'], ['shifts.id'], ondelete='CASCADE', name=op.f('fk_schedule_assignments_shift_id_shifts')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_schedule_assignments')),
        sa.UniqueConstraint('schedule_id', 'employee_id', 'shift_id', name=op.f('uq_schedule_assignments_schedule_employee_shift'))
    )
    op.create_index('ix_schedule_assignments_auto_assigned', 'schedule_assignments', ['auto_assigned', 'status'], unique=False)
    op.create_index('ix_schedule_assignments_date_employee', 'schedule_assignments', ['assigned_at', 'employee_id'], unique=False)
    op.create_index('ix_schedule_assignments_employee_id', 'schedule_assignments', ['employee_id'], unique=False)
    op.create_index('ix_schedule_assignments_employee_schedule', 'schedule_assignments', ['employee_id', 'schedule_id'], unique=False)
    op.create_index('ix_schedule_assignments_employee_status', 'schedule_assignments', ['employee_id', 'status'], unique=False)
    op.create_index('ix_schedule_assignments_id', 'schedule_assignments', ['id'], unique=False)
    op.create_index('ix_schedule_assignments_schedule_id', 'schedule_assignments', ['schedule_id'], unique=False)
    op.create_index('ix_schedule_assignments_schedule_status', 'schedule_assignments', ['schedule_id', 'status'], unique=False)
    op.create_index('ix_schedule_assignments_shift_id', 'schedule_assignments', ['shift_id'], unique=False)
    op.create_index('ix_schedule_assignments_shift_status', 'schedule_assignments', ['shift_id', 'status'], unique=False)
    op.create_index('ix_schedule_assignments_status', 'schedule_assignments', ['status'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('schedule_assignments')
    op.drop_table('notifications')
    op.drop_table('rules')
    op.drop_table('shifts')
    op.drop_table('schedules')
    op.drop_table('employees')
    # ### end Alembic commands ###