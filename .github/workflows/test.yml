name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint

    - name: Run Prettier check
      run: |
        cd frontend
        npm run format:check

    - name: Run unit tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Archive frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results/

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Black formatter check
      run: |
        cd backend
        black --check .

    - name: Run isort import sorter check
      run: |
        cd backend
        isort --check-only .

    - name: Run flake8 linting
      run: |
        cd backend
        flake8 .

    - name: Run mypy type checking
      run: |
        cd backend
        mypy src/

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        cd backend
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Archive backend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/htmlcov/
          backend/reports/
          backend/coverage.xml

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=high
      continue-on-error: true

    - name: Run Python safety check
      run: |
        cd backend
        pip install safety
        safety check
      continue-on-error: true

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        # Frontend dependencies
        cd frontend
        npm ci
        cd ..

        # Backend dependencies
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd ..

        # E2E test dependencies
        npm install @playwright/test
        npx playwright install

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Start backend server
      run: |
        cd backend
        python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: sqlite:///test.db
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test

    - name: Start frontend server
      run: |
        cd frontend
        npm start &
        sleep 30
      env:
        CI: false
        REACT_APP_API_URL: http://localhost:8000

    - name: Run E2E tests
      run: |
        npx playwright test
      env:
        BASE_URL: http://localhost:3000
        API_URL: http://localhost:8000

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          e2e-tests/test-results/
          e2e-tests/reports/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        npm install -g lighthouse

    - name: Build and start application
      run: |
        cd frontend
        npm run build
        npm install -g serve
        serve -s build -l 3000 &
        sleep 10

    - name: Run Lighthouse performance audit
      run: |
        lighthouse http://localhost:3000 \
          --chrome-flags="--headless --no-sandbox" \
          --output=html \
          --output-path=lighthouse-report.html \
          --preset=perf

    - name: Upload Lighthouse report
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-report
        path: lighthouse-report.html

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan, e2e-tests]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate test summary
      run: |
        echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
          echo "✅ Frontend tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Frontend tests failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.backend-tests.result }}" == "success" ]; then
          echo "✅ Backend tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend tests failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ Security scan passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security scan found issues" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "✅ E2E tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E tests failed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Post coverage comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        message: |
          ## 📊 Test Coverage Report

          Coverage reports have been generated and uploaded.

          - Frontend coverage: Check the artifacts for detailed HTML reports
          - Backend coverage: Check the artifacts for detailed HTML reports

          **Note**: Detailed coverage reports are available in the workflow artifacts.

# Additional workflow features that could be added:
# - Matrix testing across multiple Python/Node versions
# - Parallel test execution
# - Test result caching
# - Slack/Discord notifications
# - Deploy to staging on successful tests
# - Performance regression detection
# - Visual regression testing